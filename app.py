from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import asyncio
import os
import uuid

from config import BOT_TOKEN, WEBHOOK_URL, AUDIO_DIR, TEXT_DIR
from transcribe import transcribe_audio
from summarize import summarize_text
from utils import convert_to_wav

app = FastAPI()
application = Application.builder().token(BOT_TOKEN).build()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
stopped_users = set()

@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await application.bot.delete_webhook()
    await application.bot.set_webhook(url=WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@app.post("/webhook")
async def webhook(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    await application.process_update(update)
    return "OK"

# --- Handlers ---

async def start(update: Update, context):
    user_id = update.effective_user.id
    if user_id in stopped_users:
        stopped_users.remove(user_id)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ.\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /stop."
    )

async def stop(update: Update, context):
    user_id = update.effective_user.id
    stopped_users.add(user_id)
    await update.message.reply_text("‚è∏Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ /start.")

async def handle_audio(update: Update, context):
    user_id = update.effective_user.id
    if user_id in stopped_users:
        return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    audio_file = update.message.voice or update.message.audio or update.message.document
    if not audio_file:
        return await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª.")

    file_id = audio_file.file_id
    file = await context.bot.get_file(file_id)

    file_name = f"{uuid.uuid4()}"
    original_path = f"{AUDIO_DIR}/{file_name}.oga"
    wav_path = f"{AUDIO_DIR}/{file_name}.wav"

    await file.download_to_drive(original_path)
    convert_to_wav(original_path, wav_path)

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    try:
        transcription = transcribe_audio(wav_path)
    except Exception as e:
        return await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    with open(f"{TEXT_DIR}/{file_name}.txt", "w") as f:
        f.write(transcription)

    # –†–µ–∑—é–º–µ
    try:
        summary = summarize_text(transcription)
    except Exception as e:
        summary = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –≤—ã–∂–∏–º–∫—É."

    await update.message.reply_text(f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{transcription[:1000]}")
    await update.message.reply_text(f"üìå –í—ã–∂–∏–º–∫–∞:\n{summary[:1000]}")

# --- Router setup ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("stop", stop))
application.add_handler(MessageHandler(filters.AUDIO | filters.VOICE | filters.Document.AUDIO, handle_audio))
