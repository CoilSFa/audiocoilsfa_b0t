import os
import traceback
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler
from dotenv import load_dotenv
from utils import convert_to_wav
from summarize import transcribe_and_summarize
from pdf_generator import generate_pdf
import logging

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
application = ApplicationBuilder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–∏—à–ª—é –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üü¢ handle_audio STARTED")
    try:
        logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –∞—É–¥–∏–æ –±—ã–ª –ø—Ä–∏—Å–ª–∞–Ω
        if update.message.voice:
            file = await update.message.voice.get_file()
            file_id = update.message.voice.file_unique_id
            extension = "ogg"

        elif update.message.audio:
            file = await update.message.audio.get_file()
            file_id = update.message.audio.file_unique_id
            extension = "mp3"

        elif update.message.document and update.message.document.mime_type.startswith("audio/"):
            file = await update.message.document.get_file()
            file_id = update.message.document.file_unique_id
            extension = update.message.document.file_name.split(".")[-1]  # .mp3, .m4a –∏ —Ç.–¥.

        else:
            logger.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ, .mp3, .m4a, .ogg).")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        input_path = f"temp_{file_id}.{extension}"
        await file.download_to_drive(input_path)
        logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {input_path}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV
        wav_path = convert_to_wav(input_path)
        logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {wav_path}")

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        full_text, summary_text = transcribe_and_summarize(wav_path)

        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {full_text}")
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω summary: {summary_text}")

        # PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        pdf_path = generate_pdf(full_text)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{summary_text}\n\nüìÑ PDF —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è."
        )
        await update.message.reply_document(document=pdf_path)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))
