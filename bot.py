import os
import traceback
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler
from dotenv import load_dotenv
from utils import convert_to_wav
from summarize import transcribe_and_summarize
from pdf_generator import generate_pdf
import logging

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
application = ApplicationBuilder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–∏—à–ª—é –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        file = await update.message.voice.get_file()
        ogg_path = f"temp_{file.file_unique_id}.ogg"
        await file.download_to_drive(ogg_path)
        logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {ogg_path}")

        wav_path = convert_to_wav(ogg_path)
        logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {wav_path}")

        full_text, summary_text = transcribe_and_summarize(wav_path)

        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {full_text}")
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω summary: {summary_text}")

        pdf_path = generate_pdf(full_text)

        await update.message.reply_text(
            f"üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{summary_text}\n\nüìÑ PDF —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è."
        )

        await update.message.reply_document(document=pdf_path)

    except Exception as e:
        logger.error(f"[ERROR] {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))
