import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters
from dotenv import load_dotenv
from utils import convert_to_wav
from summarize import transcribe_and_summarize
from pdf_generator import generate_pdf

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
application = ApplicationBuilder().token(TOKEN).build()
MAX_TG_MESSAGE_LENGTH = 4096

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ + PDF.")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("üü¢ handle_audio STARTED")
    try:
        logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        message = update.message
        file = None
        if message.voice:
            file = await message.voice.get_file()
        elif message.audio:
            file = await message.audio.get_file()
        elif message.document and message.document.mime_type.startswith("audio/"):
            file = await message.document.get_file()
        else:
            await message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        ogg_path = f"temp_{file.file_unique_id}"
        extension = os.path.splitext(file.file_path)[1] or ".ogg"
        ogg_path += extension
        await file.download_to_drive(ogg_path)
        logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {ogg_path}")

        wav_path = convert_to_wav(ogg_path)
        logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {wav_path}")

        full_text, summary_text = transcribe_and_summarize(wav_path)
        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ summary ({len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤)")

        pdf_path = generate_pdf(full_text)

        for i in range(0, len(summary_text), MAX_TG_MESSAGE_LENGTH):
            chunk = summary_text[i:i+MAX_TG_MESSAGE_LENGTH]
            await message.reply_text(f"üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:{chunk}")

        await message.reply_document(document=pdf_path)

        os.remove(ogg_path)
        os.remove(wav_path)
        os.remove(pdf_path)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO | filters.Document.AUDIO, handle_audio))
