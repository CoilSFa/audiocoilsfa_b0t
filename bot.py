import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters
)

from utils import convert_to_wav
from summarize import transcribe_and_summarize
from pdf_generator import generate_pdf

load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")

application = ApplicationBuilder().token(TOKEN).build()

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ PDF —Å –∫—Ä–∞—Ç–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º."
    )

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        print("[INFO] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª...")

        message = update.message
        file = None

        if message.voice:
            file = await message.voice.get_file()
        elif message.audio:
            file = await message.audio.get_file()
        else:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return

        file_path = f"temp_{file.file_unique_id}.ogg"
        await file.download_to_drive(file_path)
        print(f"[INFO] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
        wav_path = convert_to_wav(file_path)
        print(f"[INFO] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {wav_path}")

        summary_text = transcribe_and_summarize(wav_path)
        print("[INFO] –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏ –≤—ã–∂–∏–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

        pdf_path = generate_pdf(summary_text)
        await message.reply_document(document=open(pdf_path, "rb"), filename="summary.pdf")
        print("[INFO] PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        # –û—á–∏—Å—Ç–∫–∞
        for f in [file_path, wav_path, pdf_path]:
            if os.path.exists(f):
                os.remove(f)

    except Exception as e:
        print(f"[ERROR] {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))
